#  src/main.py - Version finale int√©gr√©e avec protection anti-doublonnage

import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List
import os
import sys

# Imports des modules cr√©√©s
from src.exchanges.woofi_pro import WooFiProExchange
from src.exchanges.hyperliquid import HyperliquidExchange
from src.data.collector import FundingDataCollector
from src.data.analyzer import ArbitrageAnalyzer
from src.trading.executor import TradeExecutor
from src.trading.portfolio import PortfolioManager
from src.monitoring.alerts import AlertManager
from src.utils.config import ConfigManager

# Configuration logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/arbitrage_bot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class ArbitrageBotMain:
    """
     Bot principal d'arbitrage de taux de financement - ANTI-DOUBLONNAGE
    
    Version finale int√©gr√©e avec tous les composants:
    - WooFi Pro + Hyperliquid connect√©s
    - D√©tection automatique d'opportunit√©s
    - Ex√©cution simultan√©e d'arbitrages
    - Monitoring continu des positions
    - Protection anti-doublonnage renforc√©e
    """
    
    def __init__(self):
        logger.info(" Initialisation du bot d'arbitrage...")
        
        # 1. Chargement configuration
        self.config_manager = ConfigManager()
        if not self.config_manager.validate_config():
            raise Exception(" Configuration invalide - V√©rifiez votre .env")
        
        # 2. Initialisation des composants
        self.exchanges = {}
        self.data_collector = FundingDataCollector()
        self.analyzer = ArbitrageAnalyzer()
        self.executor = TradeExecutor()
        self.portfolio = PortfolioManager()
        self.alerts = AlertManager()
        
        # 3. Configuration depuis .env
        trading_config = self.config_manager.get_trading_config()
        self.min_entry_apr = trading_config['min_entry_apr']
        self.exit_apr = trading_config['exit_apr_threshold']
        self.max_positions = trading_config['max_open_positions']
        self.check_interval = trading_config['position_check_interval_seconds']
        
        logger.info(f" Config: APR min={self.min_entry_apr}%, exit={self.exit_apr}%, max_pos={self.max_positions}")

    async def initialize(self):
        """Initialisation asynchrone des exchanges"""
        logger.info(" Connexion aux exchanges...")
        
        try:
            # Initialisation WooFi Pro
            woofi_config = self.config_manager.get_exchange_config('woofi_pro')
            if woofi_config.get('api_key'):
                self.exchanges['woofi_pro'] = WooFiProExchange(woofi_config)
                if await self.exchanges['woofi_pro'].authenticate():
                    logger.info(" WooFi Pro connect√©")
                else:
                    logger.error(" √âchec authentification WooFi Pro")
            
            # Initialisation Hyperliquid
            hyperliquid_config = self.config_manager.get_exchange_config('hyperliquid')
            if hyperliquid_config.get('wallet_address'):
                self.exchanges['hyperliquid'] = HyperliquidExchange(hyperliquid_config)
                if await self.exchanges['hyperliquid'].authenticate():
                    logger.info(" Hyperliquid connect√©")
                else:
                    logger.error(" √âchec authentification Hyperliquid")
            
            # Configuration des composants avec exchanges
            await self.data_collector.initialize_exchanges(self.config_manager.config['exchanges'])
            self.executor.set_exchanges(self.exchanges)
            self.portfolio.set_exchanges(self.exchanges)
            
            logger.info(f" Bot initialis√© avec {len(self.exchanges)} exchanges")
            
            # Test initial
            await self._run_initial_tests()
            
        except Exception as e:
            logger.error(f" Erreur initialisation: {e}")
            raise

    async def _run_initial_tests(self):
        """Tests initiaux pour valider le setup"""
        logger.info("üß™ Ex√©cution des tests initiaux...")
        
        try:
            # Test 1: Collecte de donn√©es
            opportunities = await self.data_collector.collect_all_funding_opportunities()
            logger.info(f" Test collecte: {len(opportunities)} opportunit√©s d√©tect√©es")
            
            # Test 2: Portfolio status
            portfolio_summary = await self.portfolio.get_portfolio_summary()
            logger.info(f" Test portfolio: {portfolio_summary.get('active_positions_count', 0)} positions actives")
            
            # Test 3: Alertes
            await self.alerts.send_alert(" Bot d'arbitrage d√©marr√© avec succ√®s!", "info")
            logger.info(" Test alertes: Message envoy√©")
            
            # Afficher les meilleures opportunit√©s
            if opportunities:
                logger.info(" TOP 3 OPPORTUNIT√âS ACTUELLES:")
                for i, opp in enumerate(opportunities[:3], 1):
                    logger.info(f"   {i}. {opp['symbol']}: {opp['apr']:.1f}% APR "
                              f"(Long {opp['long_exchange']} | Short {opp['short_exchange']})")
            
        except Exception as e:
            logger.error(f" Erreur tests initiaux: {e}")

    async def main_arbitrage_loop(self):
        """Boucle principale d'arbitrage - Cycle toutes les 5 minutes avec protection anti-doublonnage"""
        
        logger.info(" D√©marrage de la boucle principale d'arbitrage")
        await self.alerts.send_alert(" Bot d'arbitrage d√©marr√© - Monitoring actif", "info")
        
        cycle_count = 0
        last_daily_summary = datetime.now().date()
        
        while True:
            try:
                cycle_count += 1
                start_time = datetime.now()
                logger.info(f" Cycle #{cycle_count} d√©marr√© - {start_time.strftime('%H:%M:%S')}")
                
                # 1. Collecte donn√©es funding rates
                opportunities = await self.data_collector.collect_all_funding_opportunities()
                logger.info(f"{len(opportunities)} opportunit√©s d√©tect√©es")
                
                # 2. Filtrage par rentabilit√©
                viable_opps = await self.analyzer.filter_profitable_opportunities(
                    opportunities, 
                    min_apr=self.min_entry_apr
                )
                logger.info(f" {len(viable_opps)} opportunit√©s viables (APR > {self.min_entry_apr}%)")
                
                # 3. Affichage des tops opportunit√©s
                if viable_opps:
                    symbols = [f"{opp['symbol']}({opp['apr']:.0f}%)" for opp in viable_opps[:3]]
                    logger.info(f"Opportunit√©s: {', '.join(symbols)}")
                
                # 4. V√©rification timing funding (buffer minimal)
                time_to_funding = self._time_until_next_funding()
                if time_to_funding > 2:  # Buffer technique de 2 minutes
                    current_positions = await self.portfolio.get_active_positions()
                    if len(current_positions) < self.max_positions:
                        
                        logger.info(f" TIMING OPTIMAL! {time_to_funding} min avant funding")
                        
                        #  NOUVEAU: Ex√©cution jusqu'√† 3 arbitrages AVEC PROTECTION ANTI-DOUBLONNAGE
                        executed_count = 0
                        for opp in viable_opps[:3]:
                            if executed_count >= 3:
                                break
                            
                            #  PROTECTION 1: V√©rifier si position existe d√©j√†
                            symbol = opp['symbol']
                            logger.info(f" V√©rification position existante pour {symbol}...")
                            position_exists = await self.portfolio.check_position_exists(symbol)
                            
                            if position_exists:
                                logger.info(f" Position {symbol} EXISTE D√âJ√Ä - Skip")
                                continue
                                
                            logger.info(f" Aucune position {symbol} existante - OK pour ouvrir")
                            logger.info(f" Tentative ex√©cution: {opp['symbol']} ({opp['apr']:.1f}% APR)")
                            
                            #  PROTECTION 2: Ex√©cution avec v√©rification
                            success = await self.executor.execute_arbitrage(opp)
                            
                            if success:
                                executed_count += 1
                                
                                #  PROTECTION 3: D√©lai pour propagation + re-v√©rification
                                logger.info(" Attente 3 secondes pour propagation position...")
                                await asyncio.sleep(3)
                                
                                # V√©rification que la position est bien cr√©√©e
                                check_created = await self.portfolio.check_position_exists(symbol)
                                if check_created:
                                    logger.info(f" Position {symbol} confirm√©e cr√©√©e")
                                else:
                                    logger.warning(f" Position {symbol} pas encore visible - monitoring requis")
                                
                                # Ajouter au tracking portfolio
                                await self.portfolio.add_arbitrage_position({
                                    'symbol': opp['symbol'],
                                    'long_exchange': opp['long_exchange'],
                                    'short_exchange': opp['short_exchange'],
                                    'entry_apr': opp['apr']
                                })
                                
                                await self.alerts.send_alert(
                                    f" <b>ARBITRAGE EX√âCUT√â</b>\n"
                                    f"‚Ä¢ Paire: {opp['symbol']}\n"
                                    f"‚Ä¢ APR: {opp['apr']:.1f}%\n"
                                    f"‚Ä¢ Long: {opp['long_exchange']}\n"
                                    f"‚Ä¢ Short: {opp['short_exchange']}\n"
                                    f"‚Ä¢ Timing: {time_to_funding} min avant funding ",
                                    "info"
                                )
                                
                                #  PROTECTION 4: Pause entre ex√©cutions
                                await asyncio.sleep(2)
                            else:
                                logger.warning(f" √âchec ex√©cution {opp['symbol']}")
                                
                        if executed_count > 0:
                            logger.info(f" {executed_count} arbitrage(s) ex√©cut√©(s) ce cycle")
                        else:
                            logger.info("Aucun arbitrage ex√©cut√© ce cycle")
                    else:
                        logger.info(f" Maximum positions atteint ({len(current_positions)}/{self.max_positions})")
                else:
                    logger.warning(f" Trop proche du funding ({time_to_funding} min) - Buffer technique")
                
                # 6. Monitoring positions actives
                await self._monitor_active_positions()
                
                # 7. R√©sum√© quotidien (une fois par jour √† 00:00)
                if datetime.now().date() > last_daily_summary:
                    portfolio_summary = await self.portfolio.get_portfolio_summary()
                    await self.alerts.send_daily_summary(portfolio_summary)
                    last_daily_summary = datetime.now().date()
                
                # 8. M√©triques du cycle
                elapsed = (datetime.now() - start_time).total_seconds()
                sleep_time = min(600, self.check_interval - elapsed)  # Minimum 10 secondes
                
                logger.info(f" Cycle #{cycle_count} termin√© en {elapsed:.1f}s - "
                          f"Prochain dans {sleep_time:.0f}s")
                
                # 9. Pause avant prochain cycle
                await asyncio.sleep(sleep_time)
                
            except KeyboardInterrupt:
                logger.info(" Arr√™t demand√© par l'utilisateur")
                break
            except Exception as e:
                logger.error(f" Erreur dans la boucle principale: {e}")
                await self.alerts.send_alert(f"üö® ERREUR BOT: {str(e)}", "error")
                # Pause avant retry pour √©viter spam d'erreurs
                await asyncio.sleep(60)

    async def _monitor_active_positions(self):
        """Monitoring et fermeture automatique des positions - APR CORRIG√â"""
        try:
            positions = await self.portfolio.get_active_positions()
            
            if not positions:
                return
                
            logger.info(f"Monitoring {len(positions)} position(s) active(s)")
            
            # üîß NOUVEAU: R√©cup√©rer les opportunit√©s actuelles UNE SEULE FOIS
            current_opportunities = {}
            try:
                opportunities = await self.data_collector.collect_all_funding_opportunities()
                for opp in opportunities:
                    key = f"{opp['symbol']}_{opp['long_exchange']}_{opp['short_exchange']}"
                    current_opportunities[key] = opp['apr']
            except Exception as e:
                logger.warning(f"Erreur r√©cup√©ration opportunit√©s pour APR: {e}")
            
            for position in positions:
                symbol = position['symbol']
                duration_hours = position.get('duration_hours', 0)
                current_pnl = position.get('total_pnl', 0)
                long_ex = position.get('long_exchange')
                short_ex = position.get('short_exchange')
                
                # üîß CORRIG√â: Calcul APR actuel
                current_apr = 150  # Valeur par d√©faut
                
                # Cherche l'APR actuel pour cette position sp√©cifique
                position_key = f"{symbol}_{long_ex}_{short_ex}"
                if position_key in current_opportunities:
                    current_apr = current_opportunities[position_key]
                else:
                    # Fallback: estimation bas√©e sur l'√¢ge de la position
                    entry_apr = position.get('entry_apr', 200)
                    # D√©clin simul√©: 5% par heure
                    decay_factor = max(0.3, 1 - (duration_hours * 0.05))
                    current_apr = entry_apr * decay_factor
                
                # Conditions de sortie
                should_exit = False
                exit_reason = ""
                
                if current_apr < self.exit_apr:
                    should_exit = True
                    exit_reason = f"APR tomb√© √† {current_apr:.1f}% (seuil: {self.exit_apr}%)"
                elif current_apr < -5:
                    should_exit = True
                    exit_reason = f"Stop loss d√©clench√©: {current_apr:.1f}% APR"
                elif duration_hours > 48:
                    should_exit = True
                    exit_reason = f"Timeout: {duration_hours:.1f}h en position (max: 48h)"
                
                if should_exit:
                    logger.info(f"üîÑ Fermeture {symbol}: {exit_reason}")
                    success = await self.executor.close_position(position)
                    
                    if success:
                        await self.alerts.send_alert(
                            f"üîÑ <b>POSITION FERM√âE</b>\n"
                            f"‚Ä¢ Paire: {symbol}\n"
                            f"‚Ä¢ Dur√©e: {duration_hours:.1f}h\n"
                            f"‚Ä¢ PnL Final: {current_pnl:.2f} USDC\n"
                            f"‚Ä¢ Raison: {exit_reason}",
                            "info"
                        )
                        logger.info(f"‚úÖ Position {symbol} ferm√©e avec succ√®s")
                    else:
                        logger.error(f"‚ùå √âchec fermeture {symbol}")
                        await self.alerts.send_alert(
                            f"üö® √âCHEC FERMETURE: {symbol} - Intervention manuelle requise",
                            "error"
                        )
                else:
                    # üîß CORRIG√â: Log avec APR r√©el
                    logger.info(f"{symbol}: APR={current_apr:.1f}%, "
                            f"PnL={current_pnl:.2f} USDC, Dur√©e={duration_hours:.1f}h")
                        
        except Exception as e:
            logger.error(f"‚ùå Erreur monitoring positions: {e}")

    def _time_until_next_funding(self) -> int:
        """Calcule minutes jusqu'au prochain funding"""
        now = datetime.now()
        # Prochain funding √† l'heure pile
        next_funding = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)
        return int((next_funding - now).total_seconds() / 60)

    async def shutdown(self):
        """Arr√™t propre du bot"""
        logger.info(" Arr√™t du bot en cours...")
        
        try:
            # Fermeture des connexions exchanges
            for exchange in self.exchanges.values():
                if hasattr(exchange, 'close'):
                    await exchange.close()
            
            # R√©sum√© final
            portfolio_summary = await self.portfolio.get_portfolio_summary()
            await self.alerts.send_alert(
                f" <b>BOT ARR√äT√â</b>\n"
                f"‚Ä¢ Positions actives: {portfolio_summary.get('active_positions_count', 0)}\n"
                f"‚Ä¢ PnL Non-r√©alis√©: {portfolio_summary.get('total_unrealized_pnl_usdc', 0):.2f} USDC\n"
                f"‚Ä¢ Capital utilis√©: {portfolio_summary.get('capital_utilization_percent', 0):.1f}%",
                "warning"
            )
            
            logger.info(" Arr√™t propre termin√©")
            
        except Exception as e:
            logger.error(f" Erreur pendant l'arr√™t: {e}")


async def main():
    """Point d'entr√©e principal"""
    print("""
     ===============================================
        BOT D'ARBITRAGE FUNDING RATES CRYPTO
        WooFi Pro + Hyperliquid Integration  
        Target: 50-1300%+ APR Market Neutral
        üõ°Ô∏è PROTECTION ANTI-DOUBLONNAGE RENFORC√âE
    ===============================================
    """)
    
    bot = None
    try:
        # 1. Initialisation
        bot = ArbitrageBotMain()
        await bot.initialize()
        
        # 2. D√©marrage de la boucle principale
        await bot.main_arbitrage_loop()
        
    except KeyboardInterrupt:
        print("\n Interruption clavier d√©tect√©e")
    except Exception as e:
        print(f" Erreur critique: {e}")
        logger.error(f"Erreur critique: {e}")
    finally:
        # 3. Arr√™t propre
        if bot:
            await bot.shutdown()
        print("üëã Au revoir!")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f" Erreur fatale: {e}")